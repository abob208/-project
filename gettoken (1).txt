/* 
 * File:   main.cpp
 * Author: User
 *
 * Created on 2018年4月10日, 下午 4:48
 */
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<iostream>

using namespace std;
enum TokenType { IDENTIFIER = 34512, CONSTANT = 87232, SPECIAL = 29742 } ;
typedef char * CharPtr ;
struct Column {
  int column ;                  // 此token(的字首)在本line有出現於此column
  Column * next;                // 下一個此token(在本line)有出現的column
} ; // Column

typedef Column * ColumnPtr ;


struct Line {                   // struct Line 記錄了4種資訊
  int line ;                    // 此token放在哪一 line
  ColumnPtr firstAppearAt ;     // 指到此token第一次出現在此line的哪一column
  ColumnPtr lastAppearAt ;      // 指到此token最後出現在此line的哪一column
  Line *  next;                 // 同一 token 下一次出現在哪一 line
} ;


typedef Line * LinePtr ;

struct Token {                  // Struct token 紀錄了4種資訊
  CharPtr tokenStr ;        // tokenStr 放你切下來的token
  TokenType type;               // type 紀錄此token是屬於哪一個case
  LinePtr firstAppearOn ;       // 此 token 第一次出現在哪一 line
  LinePtr lastAppearOn ;        // 此 token 最後出現在哪一 line
  Token * next ;                // 指向下一個token
} ; // struct Token


typedef Token * TokenPtr ;

TokenPtr gFront = NULL, gtail = NULL ;  // 分別指向Token串列的頭跟尾

typedef char Str100[ 100 ] ; // 此型別是打算用來宣告一個陣列變數、以供讀字串之


int gline = 1 ;              // 「下一個要讀進來的字元」所在的line number

int gcol = 0 ;  

bool Case1( char a ) {
  if( a >='a' && a <= 'z' )
    return true ;
  if( a>= 'A' && a <= 'Z' )
    return true ;
  if ( a == '_' )
    return true ;
  return false ;
} // Case1

bool Case2( char a ) {
  if( a == '"' )
    return true ;
  if( a >= '0' && a <= '9' )
    return true ;
  if( a == '\'' )
    return true ;
  return false ;
} // Case2

bool Case3( char b ) {
  if ( b == '_') 
    return false ;
  if ( b == '+' || b == '-' || b == '*' || b == '/' || b ==  '>' ||  
          b == '<' || b == '=' || b == '?' || b == '%' || b == '&' ||
           b == '|' || b == '^' || b == '.' || b ==  ',' || b == '('  ||
            b == ')' || b == '['  || b == ']' || b == '{' || b == '}'  ||
            b == '!'  || b == ':' || b ==  ';'  || b == '#' )
    return true ;
  return false ;
} // Case3

void F1( char & a ) {
  int n = 0 ;
  scanf( "%c", &a ) ;
  if( a == '\n' ) {
    gline++;
    gcol = 0 ;
  } // if
  else
  {
     gcol++;
  } // else
} // F1

void F2( char & a ){
 int k = 1 ;
  char b = '\0' ;
  bool off = false ;
  while( a == '\n' || a == ' ' || a == '\r' || a == '\t' || a == '/') {
    F1( a ) ;
    b = cin.peek() ;
    if( a == '/' && b == '/' ) {
      while( a != '\n' ) {
        F1( a );
      } // while
      off = true ;
    } // if
    if( a == '/' && b == '*' ) {
      while( k != 0 ) {
        F1( a ) ;
        b = cin.peek() ;
        if( b == '/' && a == '*')
          k = 0 ;
      } // while
      
      F1( a ) ;
      off = true ;
    } // if
    if( off == false && a == '/')
      break ;
  } // while

} // F2

void F3( Str100 temp,char a ){
  strcpy( temp, "\0" ) ;
  int i = 0 ;
  char b = ' ' ;
  while( a != '\n' && a != ' ' && a != '/' && !Case3(b) && a != '\r' && a != '\t') {
    temp[i] = a ;
    i++ ;
    b = cin.peek() ;
    if( !Case3( b ) )
      F1( a ) ;
  } // while
  
} // F3

void F4( Str100 temp, char a ) {
  strcpy( temp, "\0" ) ;
  int j = 0 ;
  char b =' ' ;
  char c = '\0' ;
  int i = 1 ;
  temp[0] = a ;
  if( a == '"' ) {
      a = '\0' ;
    while( a != '"' ) {
      j = 0 ;
      F1(a) ;
      c = cin.peek() ;
      if( a == '\\' && c == '\\' ) {
        temp[i] = a ;
        F1( a ) ;
        i++ ;
        temp[i] = a ;
        i++;
      } // if
      else if( a == '\\' && c == '"' ) {
        temp[i] = a ;
        F1( a ) ;
        i++ ;
        temp[i] = a ;
        i++;
        a = '\0' ;
      } // else 
      else {
        temp[i] = a ;
        i++ ;
      } // else
    } // while
  } // if
  else if( a == '\'' ) {
    F1( a ) ;
    temp[i] = a ;
    if( a == '\\' ) {
      F1( a ) ;
      temp[2] = a ;
      F1( a ) ;
      temp[3] = '\'' ;
    } // if
    else {
      F1( a ) ;
      temp[2] = '\'' ;
    } // else
  } // else
  else{
    while( a != '\n' && a != ' ' && a != '/' && !Case3(b) && a != '\r' && a != '\t' ) {
      b = cin.peek() ;     
      if( b == ' ' ) {
        F1(a) ;
        a = ' ' ;
      } // if
      
      if( !Case3( b ) && b != ' ') {
        F1(a) ;
        if( a != '\n' ) 
          temp[i] = a ;
      } // if
      
      if( b == '.' ) {
        F1(a) ;
        temp[i] = a ;
        b = ' ' ;
      } // if
      i++;
    } // while
  } // else
} // F4

void F5( Str100 temp, char a ) {
  char b = ' ' ;
  char c = '\0' ;
  strcpy( temp, "\0" ) ;
  int i = 1 ;
  temp[0] = a ;
  if ( a == '<' ) {
    b = cin.peek() ;
    if ( b == '=' || b == '<') {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
  
  else if ( a == '>' ) {
    b = cin.peek() ;
    if ( b == '=' || b == '>' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
  
  else if ( a == '=' ) {
    b = cin.peek() ;
    if ( b == '=' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
        
  else if ( a == '!' ) {
    b = cin.peek() ;
    if ( b == '=' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
  
  else if ( a == '&' ) {
    b = cin.peek() ;
    if ( b == '&' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
  
  else if ( a == '|' ) {
    b = cin.peek() ;
    if ( b == '|' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if

  else if ( a == '+' ) {
    b = cin.peek() ;
    if ( b == '+' ) {
      F1(c) ;
      temp[1] = c ;
    } // if
  } // if
  
  else if ( a == '-' ) {
    b = cin.peek() ;
    if ( b == '-' || b == '>' ) {
      F1( c ) ;
      temp[1] = c ;
    } // if
  } // if
  
  else {
    ;
  } // else
} // F5

CharPtr GetToken( char  a, TokenType & type, int & col ) { // GetToken()可能會有一些參數
  Str100 tokenStr = { 0 } ; // 初始
  F2( a ) ;
  col = gcol ;
  if( Case1( a ) ) {
    F3( tokenStr, a ) ;
    type = IDENTIFIER ;
  } // if
  else if( Case2( a ) ) {
    F4( tokenStr, a ) ;
    type = CONSTANT ;
  } // else
  else if( Case3( a ) ) {
    F5( tokenStr, a ) ;
    type = SPECIAL ;
  } // if
    
  CharPtr returnTokenStr = NULL ;
  returnTokenStr = new char[ strlen( tokenStr ) + 1 ] ;
  strcpy( returnTokenStr, tokenStr ) ;
  return returnTokenStr ;

} // GetToken()

void PrintTokenInfo( int i ) {
// 印出 gFront 指向的 Token 串中第i個token的相關資訊

  TokenPtr current = gFront ;

  for ( int j = 0 ;
         current != NULL && j < i ;
         j ++ )
    current = current->next;

  printf( "%s ", current->tokenStr ) ;

  LinePtr lineWalk = NULL ;
  ColumnPtr columnWalk = NULL ;

  for ( lineWalk = current->firstAppearOn ;
         lineWalk != NULL ;
         lineWalk = lineWalk->next ) {
    for ( columnWalk = lineWalk->firstAppearAt ;
           columnWalk != NULL ;
           columnWalk = columnWalk->next ) 
      printf( "(%d,%d)", lineWalk->line, columnWalk->column ) ;
  } // for
  
  printf( "\n" ) ;

} // PrintTokenInfo()

int main() {
  LinePtr line2 = NULL ;
  int line1 = 0 ;
  bool print = false ;
  int num1 = 0 ;
  int num2 = 0 ;
  int num3 = 0 ;
  int i = 1 ;
  int j = 0 ;
  int ccol ;
  char a = ' ' ;
  Str100 jj ;
  TokenPtr token = NULL ;
  TokenPtr temp = NULL ;
  TokenPtr temp1 = NULL ;
  TokenPtr same1 = NULL ;
  TokenType type1 ;
  CharPtr z = NULL ;
  bool same = false ;
  bool deal = false ;
  int command = 0 ;
  int total = 0 ;
  int n = 0 ;
    z = GetToken( a, type1, ccol ) ;
    if ( token == NULL ) {
        token = new Token ;
        gFront = token ;
        token->tokenStr = z ;
        token->type = type1 ;
        token->firstAppearOn = new Line ;
        token->firstAppearOn->line = gline ;
        token->lastAppearOn =  token->firstAppearOn ;
        token->firstAppearOn->firstAppearAt = new Column ;
        token->firstAppearOn->firstAppearAt->column = ccol ;
        token->lastAppearOn->lastAppearAt = token->firstAppearOn->firstAppearAt ;
    } // if
    
    z = GetToken( a, type1, ccol ) ;
  while( strcmp( z, "END_OF_FILE") != 0 ) {
    token = gFront ;
    while( token != NULL ) {
      if( strcmp( z, token->tokenStr) == 0 ){
        same = true ;
        break ;
      } // if
      token = token->next ;
    } // while
    
    if( same == false )
      token = gFront ;
    if ( same == false ) {
       if( token != NULL ){
        token = gFront ;
        while( token != NULL && token->next != NULL && deal == false ) {
          if( strcmp( z, gFront->tokenStr ) < 0 ) {
            token = new Token ;
            token->type = type1 ;
            token->tokenStr = z ;
            token->firstAppearOn = new Line ;
            token->firstAppearOn->line = gline ;
            token->lastAppearOn = token->firstAppearOn ;
            token->firstAppearOn->firstAppearAt = new Column ;
            token->firstAppearOn->firstAppearAt->column = ccol ;
            token->lastAppearOn->lastAppearAt = token->firstAppearOn->firstAppearAt;  
            token->next = gFront ;
            gFront = token ;
            deal = true ;
          } // if
          else if( strcmp( z, token->tokenStr ) > 0 && strcmp( z, token->next->tokenStr ) < 0 && deal == false ) {
            temp = token -> next ;
            temp1 = token ;
            token = new Token ;
            token->tokenStr = z ;
            token->type = type1 ;
            token->firstAppearOn = new Line ;
            token->firstAppearOn->line = gline ;
            token->lastAppearOn = token->firstAppearOn ;
            token->firstAppearOn->firstAppearAt = new Column ;
            token->firstAppearOn->firstAppearAt->column = ccol ;
            token->lastAppearOn->lastAppearAt =  token->firstAppearOn->firstAppearAt ; 
            token->next = temp ;
            temp1->next = token ;
            deal = true ;
          } // if
          
            token = token->next ;
            
        } // while
        
           if( deal == false && token->next == NULL ) {
             if( strcmp( z, token->tokenStr ) > 0 ) {
              token->next = new Token ;
              token = token -> next ;
              token->tokenStr = z ;
              token->type = type1 ;
              token->firstAppearOn = new Line ;
              token->firstAppearOn->line = gline ;
              token->lastAppearOn = token->firstAppearOn ;
              token->firstAppearOn->firstAppearAt = new Column ;
              token->firstAppearOn->firstAppearAt->column = ccol ;
              token->lastAppearOn->lastAppearAt = token->firstAppearOn->firstAppearAt ;
              deal = true ;
             } // if
             else if( strcmp( z, token->tokenStr ) < 0 ) {
               token = new Token ;
               token->type = type1 ;
               token->tokenStr = z ;
               token->firstAppearOn = new Line ;
               token->firstAppearOn->line = gline ;
               token->lastAppearOn = token->firstAppearOn ;
               token->firstAppearOn->firstAppearAt = new Column ;
               token->firstAppearOn->firstAppearAt->column = ccol ;
               token->lastAppearOn->lastAppearAt = token->firstAppearOn->firstAppearAt;  
               token->next = gFront ;
               gFront = token ;
               deal = true ;
             } // else               
          } // if
      } // else
    } // if
    else if( same == true ) {
      if( token->lastAppearOn->line == gline ) {
        token->lastAppearOn->lastAppearAt->next = new Column ;
        token->lastAppearOn->lastAppearAt = token->lastAppearOn->lastAppearAt->next ;
        token->lastAppearOn->lastAppearAt->column = ccol ;
        token->lastAppearOn->lastAppearAt->next = NULL ;
      } // if
      else if( token->lastAppearOn->line != gline ) {
          token->lastAppearOn->next = new Line ;
          token->lastAppearOn = token->lastAppearOn->next ;
          token->lastAppearOn->line = gline ;
          token->lastAppearOn->firstAppearAt = new Column ;
          token->lastAppearOn->firstAppearAt->column = ccol ;
          token->lastAppearOn->lastAppearAt = token->lastAppearOn->firstAppearAt ;
          token->lastAppearOn->lastAppearAt->next = NULL ;
      } // else
    } // else
     z = GetToken( a, type1, ccol ) ;
     deal = false ;
     same = false ;
     token = gFront ;
  } // while
  
  token = gFront ;
  while( token != NULL ) {
    PrintTokenInfo( j ) ;
    token = token -> next ;
    j++ ;
  } // while
  
  j = 0 ;
  token = gFront ;
  printf( "\n請輸入指令 : \n" ) ; 
  printf( "1.總共有多少種 token\n" ) ;
  printf( "2.三種case各有多少 token\n" ) ;
  printf( "3.印出指定 token 的位置 (line number,column number) (要排序)\n" ) ;
  printf( "4.印出所指定的那一 line 出現哪些 token (要排序)\n" ) ;
  printf( "5.結束\n" ) ;
  while( command != 5 ) {
    cin >> command ;
    if( command == 5 ) {
      break ;
    } // if
    printf( "\n" ) ;
    if ( command == 1 ) {
      total = 0 ;
      while( token != NULL ) {
        total++;
        token = token->next ;
      } // while
      token = gFront ;
      printf("總共%d種\n", total ) ;
    } // if
    else if ( command == 2 ) {
      num1 = 0 ;
      num2 = 0 ;
      num3 = 0 ;
      while( token != NULL ) {
        if( token->type == IDENTIFIER ) 
          num1++ ;
          else if( token->type == CONSTANT ) 
            num2++ ;
          else if( token->type == SPECIAL )
            num3++ ;
        token = token->next ;
      } // while
      token = gFront ;
      printf("Case1 共 %d個\n", num1 ) ;
      printf("Case2 共 %d個\n", num2 ) ;
      printf("Case3 共 %d個\n", num3 ) ; 
    } // else if
    else if ( command == 3 ) {
      printf( "請輸入要搜尋的 token : \n" ) ;
      scanf( " %[^\r\n]", jj ) ;
      while( token != NULL ) {
        if( strcmp( jj, token->tokenStr ) == 0 ) {
            PrintTokenInfo( j ) ;
            print = true ;
        } // if
        j++;
        token = token->next ;
      } // while
      
      if( print == false )
        printf( "%s 查無此token : %s\n", jj, jj ) ;
      j = 0 ;
      token = gFront ;
      print = false ;
    } // else if
    else if ( command == 4 ) {
      printf( "請輸入要指定的 line : \n" ) ;
      cin >> line1 ;
      if( line1 > gline )
         ;
      else {
        while( token != NULL ) {
          line2 = token->firstAppearOn ;
          while( line2 != NULL ) {
            if( line2->line == line1 ) {
              printf( "%s\n", token->tokenStr ) ;
            } // if  
            line2 = line2->next ;
          } // while
          token = token->next ;
        } // while
      } // else
      token = gFront ;
    } // else if
    

  } // while
  
  printf( "byebye" ) ;
  return 0;
}