bplist00?XUTI-Data?_$com.apple.traditional-mac-plain-text_public.utf8-plain-text_public.utf16-plain-textO?import java.util.* ;import java.lang.* ;import CYICE.* ;class G {  static Scanner scan = new Scanner( System.in ) ;  static ICEInputStream sIn ;  static int sTestNum = -1 ;  static void Init() throws Throwable {    sIn = new ICEInputStream();  } // Init()  static String Big5( String str ) throws Throwable {  // the return-string is encoded in ISO8859_1 ; anyone who needs to convert the  // encoding of a Big5-encoded string to ISO8859_1 should call this function to do the conversion    return new String( str.getBytes( "big5" ), "ISO8859_1" ) ;  } // Big5()  static void CYPrint( String str ) throws Throwable {  // Ùv•cpS(ÂNBig5∫pencodingÑv)byte stream˙QªSˇ   // N??System.out.print()ùOgqenvironmentÑvencodingpS˙QªS    byte[] binary = str.getBytes( "Big5" );    System.out.write( binary, 0, binary.length ) ;          } // CYPrint()} // class Gclass Buffer {  static int snumber = 0 ;  private Vector<String> mcontant = null ;  String mname = new String() ;  private int mCurrentLine = -1 ;  Vector<String> Getcontant() throws Throwable {    return mcontant ;  } // Getcontant()  void Setcontant( Vector<String> a ) throws Throwable {    mcontant = a ;  } // Setcontant()  int Getline() throws Throwable {    return mCurrentLine ;  } // Getline()  void Setline( int a ) throws Throwable {    mCurrentLine = a ;  } // Setline()  void Add( String temp, Buffer buf ) throws Throwable {    temp = G.scan.nextLine() ;    if ( buf.mcontant == null ) {       buf.mcontant = new Vector<String>() ;    } // if    if ( buf.mCurrentLine == buf.mcontant.size() - 1 ) {      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( buf.mCurrentLine, temp ) ;        temp = G.scan.nextLine() ;      } // while    } // if     else {      buf.mCurrentLine = buf.mcontant.size() - 1 ;      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( temp ) ;        temp = G.scan.nextLine() ;      } // while    } // else  } // Add()  void Insert( String temp, Buffer buf ) throws Throwable {    temp = G.scan.nextLine() ;    if ( buf.mcontant == null ) {      buf.mcontant = new Vector<String>() ;      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( buf.mCurrentLine, temp ) ;        temp = G.scan.nextLine() ;      } // while    } // if    else {      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( buf.mCurrentLine - 1, temp ) ;        temp = G.scan.nextLine() ;      } // while      buf.mCurrentLine-- ;    } // else  } // Insert()  void Insert2( String temp, Buffer buf, StringObj line ) throws Throwable {    temp = G.scan.nextLine() ;    int n = 0 ;    if ( !line.val.equals( "." ) && !line.val.equals( "$" ) ) {      n = Integer.parseInt( line.val ) ;      if ( n > buf.mcontant.size() ) {        System.out.println( "Error : Line number out of range! Please try again." ) ;        return ;      } // if            buf.mCurrentLine = n - 1 ;    } // if    if ( line.val.equals( "$" ) )       buf.mCurrentLine = buf.mcontant.size() - 1 ;    if ( buf.mcontant == null ) {      buf.mcontant = new Vector<String>() ;      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( buf.mCurrentLine, temp ) ;        temp = G.scan.nextLine() ;      } // while    } // if    else {      while ( !temp.equals( "." ) ) {        buf.mCurrentLine++ ;        buf.mcontant.add( buf.mCurrentLine - 1, temp ) ;        temp = G.scan.nextLine() ;      } // while      buf.mCurrentLine-- ;    } // else  } // Insert2()  void Change( String temp, Buffer buf ) throws Throwable {    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;    else {      buf.mcontant.remove( buf.mCurrentLine ) ;      temp = G.scan.nextLine() ;      while ( !temp.equals( "." ) ) {        buf.mcontant.add( buf.mCurrentLine, temp ) ;        buf.mCurrentLine ++ ;        temp = G.scan.nextLine() ;      } // while      buf.mCurrentLine -- ;    } // else   } // Change()  void Change2( String temp, Buffer buf, StringObj line ) throws Throwable {    int n = 0 ;    if ( !line.val.equals( "." ) && !line.val.equals( "$" ) ) {      n = Integer.parseInt( line.val ) ;      if ( n > buf.mcontant.size() ) {        System.out.println( "Error : Line number out of range! Please try again." ) ;        return ;      } // if      buf.mCurrentLine = n - 1 ;    } // if    if ( line.val.equals( "$" ) )       buf.mCurrentLine = buf.mcontant.size() - 1 ;    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;    else {      buf.mcontant.remove( buf.mCurrentLine ) ;      temp = G.scan.nextLine() ;      while ( !temp.equals( "." ) ) {        buf.mcontant.add( buf.mCurrentLine, temp ) ;        buf.mCurrentLine ++ ;        temp = G.scan.nextLine() ;      } // while      buf.mCurrentLine -- ;    } // else   } // Change2()  void Delete( String temp, Buffer buf ) throws Throwable {    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;    else {      buf.mcontant.remove( buf.mCurrentLine ) ;      if ( buf.mCurrentLine == buf.mcontant.size() ) {        buf.mCurrentLine -- ;      } // if      else {        ;      } // else    } // else   } // Delete()  void Delete2( String temp, Buffer buf, StringObj line ) throws Throwable {    int n = 0 ;    if ( !line.val.equals( "." ) && !line.val.equals( "$" ) ) {      n = Integer.parseInt( line.val ) - 1 ;      if ( n > buf.mcontant.size() ) {        System.out.println( "Error : Line number out of range! Please try again." ) ;        return ;      } // if    } // if    if ( line.val.equals( "$" ) )       n = buf.mcontant.size() - 1 ;    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;    else {      buf.mcontant.remove( n ) ;      if ( buf.mCurrentLine == buf.mcontant.size() ) {        buf.mCurrentLine--;      } // if      else {        ;      } // else    } // else   } // Delete2()  void Printall( String temp, Buffer buf ) throws Throwable {    if ( buf.mcontant == null )      System.out.print( "" ) ;    else {      for ( int i = 0 ; i < buf.mcontant.size() ; i++ )        System.out.println( buf.mcontant.get( i ) ) ;    } // else    // buf.mCurrentLine = buf.mcontant.size() - 1 ;  } // Printall()  void Print( String temp, Buffer buf ) throws Throwable {    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;     else {      System.out.println( buf.mcontant.get( buf.mCurrentLine ) ) ;    } // else  } // Print()  void Print2( String temp, Buffer buf, StringObj line ) throws Throwable {    int n = 0 ;    if ( !line.val.equals( "." ) && !line.val.equals( "$" ) ) {      n = Integer.parseInt( line.val ) ;      if ( n > buf.mcontant.size() ) {        System.out.println( "Error : Line number out of range! Please try again." ) ;        return ;      } // if      n-- ;    } // if    if ( line.val.equals( "$" ) )       n = buf.mcontant.size() - 1 ;    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;     else {      System.out.println( buf.mcontant.get( n ) ) ;    } // else  } // Print2()  void Dot( String temp, Buffer buf ) throws Throwable {    if ( buf.mcontant == null )      System.out.println( "Error : There is no data! Please try again." ) ;     else {      buf.mCurrentLine = buf.mCurrentLine + 1 ;      System.out.print( buf.mCurrentLine + " : " ) ;      buf.mCurrentLine = buf.mCurrentLine - 1 ;      System.out.println( buf.mcontant.get( buf.mCurrentLine ) ) ;    } // else  } // Dot()  void Money( String temp, Buffer buf ) throws Throwable {    buf.mCurrentLine = buf.mcontant.size() - 1 ;    System.out.print( buf.mcontant.size() + " : " ) ;    System.out.println( buf.mcontant.get( buf.mcontant.size() - 1 ) ) ;  } // Money()  void Num( String temp, Buffer buf, String command ) throws Throwable {    int n = Integer.parseInt( command ) ;    if ( n > buf.mcontant.size() ) {      System.out.println( "Error : Line number out of range! Please try again." ) ;      return ;    } // if    buf.mCurrentLine = Integer.parseInt( command ) - 1 ;    System.out.print( Integer.parseInt( command ) ) ;    System.out.print( " : " ) ;    System.out.println( buf.mcontant.get( buf.mCurrentLine ) ) ;    } // Num()  void Lb( String temp, int size, Vector<Buffer> aaa ) throws Throwable {    for ( int i = 0 ; i < size ; i++ ) {      System.out.print( aaa.get( i ).mname + " " ) ;      if ( aaa.get( i ).mcontant != null )        System.out.println( aaa.get( i ).mcontant.size() ) ;      else {        System.out.println( "0" ) ;      } // else    } // for  } // Lb()  void B( String temp, Buffer buf ) throws Throwable {    if ( temp.equals( "" ) ) {      if ( buf.mcontant == null )        System.out.println( buf.mname + " 0" ) ;      else {        System.out.println( buf.mname + " " + buf.mcontant.size() ) ;      } // else    } // if    else {      temp = temp.replace( " ", "" ) ;      buf.mname = temp ;    } // else  } // B()  void Add2( String temp, Buffer buf, StringObj line ) throws Throwable {    int n = 0 ;    if ( !line.val.equals( "." ) && !line.val.equals( "$" ) ) {      n = Integer.parseInt( line.val ) ;      if ( n > buf.mcontant.size() ) {        System.out.println( "Error : Line number out of range! Please try again." ) ;        return ;      } // if      buf.mCurrentLine = n - 1 ;    } // if    temp = G.scan.nextLine() ;    if ( line.val.equals( "$" ) )       buf.mCurrentLine = buf.mcontant.size() - 1 ;    if ( buf.mcontant == null ) {       buf.mcontant = new Vector<String>() ;    } // if    while ( !temp.equals( "." ) ) {      buf.mCurrentLine++ ;      buf.mcontant.add( buf.mCurrentLine, temp ) ;      temp = G.scan.nextLine() ;    } // while      } // Add2()  static boolean Isnum( String temp ) throws Throwable {    if ( temp.equals( "" ) || temp == null )      return false ;    for ( int i = 0 ; i < temp.length() ; i++ ) {      if ( '0' > temp.charAt( i ) || temp.charAt( i ) > '9' )        return false ;    } // for     return true ;  } // Isnum() } // class Bufferclass Editor {  private Vector<Buffer> mbuffer = null ;  private Buffer mcurrentbuffer = null ;  Vector<Buffer> Getmbuffer() throws Throwable {    return mbuffer ;  } // Getmbuffer()  void Setmbuffer( Vector<Buffer> a ) throws Throwable {    mbuffer = a ;  } // Setmbuffer()  Buffer Getbuffer() throws Throwable {    return mcurrentbuffer ;  } // Getbuffer()  void Setbuffer( Buffer a ) throws Throwable {    mcurrentbuffer = a ;  } // Setbuffer()  void Execmd( StringObj command, String temp, StringObj line ) throws Throwable {    System.out.print( "> " ) ;    if ( command.val.equals( "a" ) ) {      if ( line.val.equals( "" ) )         mcurrentbuffer.Add( temp, mcurrentbuffer ) ;      else if ( !line.val.equals( "" ) )        mcurrentbuffer.Add2( temp, mcurrentbuffer, line ) ;    } // if    else if ( command.val.equals( "c" ) ) {      if ( line.val.equals( "" ) )        mcurrentbuffer.Change( temp, mcurrentbuffer ) ;      else if ( !line.val.equals( "" ) )        mcurrentbuffer.Change2( temp, mcurrentbuffer, line ) ;    } // else if    else if ( command.val.equals( "p" ) ) {      if ( line.val.equals( "" ) )        mcurrentbuffer.Print( temp, mcurrentbuffer ) ;      else if ( !line.val.equals( "" ) )        mcurrentbuffer.Print2( temp, mcurrentbuffer, line ) ;    } // else if    else if ( command.val.equals( "%p" ) )       mcurrentbuffer.Printall( temp, mcurrentbuffer ) ;    else if ( command.val.equals( "d" ) ) {      if ( line.val.equals( "" ) )        mcurrentbuffer.Delete( temp, mcurrentbuffer ) ;      else if ( !line.val.equals( "" ) )        mcurrentbuffer.Delete2( temp, mcurrentbuffer, line ) ;    } // else if     else if ( command.val.equals( "i" ) ) {      if ( line.val.equals( "" ) )        mcurrentbuffer.Insert( temp, mcurrentbuffer ) ;        else if ( !line.val.equals( "" ) )        mcurrentbuffer.Insert2( temp, mcurrentbuffer, line ) ;    } // else if     else if ( command.val.equals( "$" ) )       mcurrentbuffer.Money( temp, mcurrentbuffer ) ;    else if ( Buffer.Isnum( command.val ) )       mcurrentbuffer.Num( temp, mcurrentbuffer, command.val ) ;    else if ( command.val.equals( "." ) )       mcurrentbuffer.Dot( temp, mcurrentbuffer ) ;    else if ( command.val.equals( "lb" ) ) {      for ( int i = 0 ; i < mbuffer.size() ; i++ ) {        System.out.print( mbuffer.get( i ).mname + " " ) ;        if ( mbuffer.get( i ).Getcontant() != null )          System.out.println( mbuffer.get( i ).Getcontant().size() ) ;        else {          System.out.println( "0" ) ;        } // else      } // for    } // else if    else if ( command.val.equals( "b" ) ) {      mcurrentbuffer.B( temp, mcurrentbuffer ) ;    } // else if    else if ( command.val.equals( "cb" ) ) {      CB( temp ) ;    } // else if    else if ( command.val.equals( "nb" ) ) {      NB( temp ) ;    } // else if    else {      System.out.println( "Error : Illegal command! Please try again." ) ;    } // else  } // Execmd()  void NB( String temp ) throws Throwable {    mcurrentbuffer = new Buffer() ;    if ( temp.equals( "" ) ) {      mcurrentbuffer.mname = "Buffer-" + Buffer.snumber ;      Buffer.snumber++ ;    } // if    else {      temp = temp.replace( " ", "" ) ;      mcurrentbuffer.mname = temp ;    } // else    mbuffer.add( mcurrentbuffer ) ;  } // NB()  void CB( String temp ) throws Throwable {    temp = temp.replace( " ", "" ) ;    if ( temp.equals( "" ) )      temp = G.scan.next() ;    for ( int i = 0 ; i < mbuffer.size() ; i++ ) {      if ( mbuffer.get( i ).mname.equals( temp ) ) {        mcurrentbuffer = mbuffer.get( i ) ;        return ;      } // if    } // for    System.out.println( "Error : There is no such buffer! Please try again." ) ;  } // CB()} // class Editorclass Main {    static void Getcmd( StringObj command, String temp ) throws Throwable {    temp = temp.replace( " ", "" ) ;    if ( command.val.charAt( 0 ) == 'n' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) && temp.charAt( 0 ) == 'b' ) {        command.val = "nb" ;         return ;      } // if    } // if    if ( command.val.charAt( 0 ) == 'l' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) && temp.charAt( 0 ) == 'b' ) {        command.val = "lb" ;         return ;      } // if    } // if    if ( command.val.charAt( 0 ) == 'c' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) && temp.charAt( 0 ) == 'b' ) {        command.val = "cb" ;         return ;      } // if    } // if    if ( command.val.charAt( 0 ) == '%' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) && temp.charAt( 0 ) == 'p' ) {        command.val = "%p" ;         return ;      } // if    } // if    if ( Buffer.Isnum( command.val ) ) {      if ( !temp.equals( "" ) ) {        if ( temp.charAt( 0 ) == 'p' || temp.charAt( 0 ) == 'a' || temp.charAt( 0 ) == 'd'             || temp.charAt( 0 ) == 'i' || temp.charAt( 0 ) == 'c' ) {          command.val = command.val + temp.charAt( 0 ) ;          return ;        } // if      } // if    } // if    if ( command.val.charAt( 0 ) == '$' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) ) {        if ( temp.charAt( 0 ) == 'p' || temp.charAt( 0 ) == 'a' || temp.charAt( 0 ) == 'd'             || temp.charAt( 0 ) == 'i' || temp.charAt( 0 ) == 'c' ) {          command.val = command.val + temp.charAt( 0 ) ;          return ;        } // if      } // if    } // if    if ( command.val.charAt( 0 ) == '.' && command.val.length() == 1 ) {      if ( !temp.equals( "" ) ) {        if ( temp.charAt( 0 ) == 'p' || temp.charAt( 0 ) == 'a' || temp.charAt( 0 ) == 'd'             || temp.charAt( 0 ) == 'i' || temp.charAt( 0 ) == 'c' ) {          command.val = command.val + temp.charAt( 0 ) ;          return ;        } // if      } // if    } // if  } // Getcmd()  static void Parser( StringObj command, StringObj b ) throws Throwable {    b.val = "" ;    int n = 0 ;    if ( command.val.length() > 1 && !Buffer.Isnum( command.val ) ) {      if ( command.val.charAt( 0 ) == '.' || command.val.charAt( 0 ) == '$' ) {          b.val = "" + command.val.charAt( 0 ) ;        command.val = "" + command.val.charAt( 1 ) ;        return ;      } // if      for ( int i = 0 ; '0' <= command.val.charAt( i ) && command.val.charAt( i ) <= '9' ; i++ ) {        if ( '0' <= command.val.charAt( i ) && command.val.charAt( i ) <= '9' ) {          b.val = b.val + command.val.charAt( i ) ;          n = i ;        } // if      } // for      if ( !b.val.equals( "" ) )        command.val = "" + command.val.charAt( n + 1 ) ;    } // if      } // Parser()  public static void main( String[] args ) throws Throwable {    Editor editor = new Editor() ;    StringObj number = new StringObj() ;    String a = new String(), temp = new String() ;    G.sTestNum = G.scan.nextInt() ;    StringObj command = new StringObj() ;    command.val = G.scan.next() ;    temp = G.scan.nextLine() ;    Getcmd( command, temp ) ;    Parser( command, number ) ;    G.CYPrint( "ak?O(u-NüS?Â]Line editor ...\n" ) ;    while ( !command.val.equals( "q" ) ) {      if ( editor.Getmbuffer() == null ) {        editor.Setmbuffer( new Vector<Buffer>() ) ;        editor.Setbuffer( new Buffer() ) ;        editor.Getmbuffer().add( editor.Getbuffer() ) ;        editor.Getbuffer().mname = "Buffer-" + Buffer.snumber ;        Buffer.snumber++ ;      } // if      editor.Execmd( command, temp, number ) ;      command.val = G.scan.next() ;      temp = G.scan.nextLine() ;      Getcmd( command, temp ) ;      Parser( command, number ) ;    } // while    G.CYPrint( "> ??O(u-NüS?Â]Line editorˇ" ) ;  } // main()} // class Main